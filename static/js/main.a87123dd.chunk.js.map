{"version":3,"sources":["components/Login/Login.js","components/Signup/Signup.js","pages/LoginPage/LoginPage.js","pages/MyPentryPage/MyPentryPage.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","username","password","handleInputChange","e","setState","target","name","value","handleSubmit","preventDefault","axios","get","PANTRY_API","then","res","bcrypt","compare","data","_","passwordMatch","Error","localStorage","setItem","JSON","stringify","props","handleLogin","err","console","log","catch","type","placeholder","onChange","this","onClick","Component","Signup","passwordRepeat","hash","hashedPassword","post","LoginPage","checkUserLoggedIn","parse","getItem","history","push","MyPentryPage","process","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a87123dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport bcrypt from 'bcryptjs';\nimport axios from 'axios';\nimport { PANTRY_API } from '../../App';\n\nclass Login extends Component {\n  state = {\n    username: '',\n    password: ''\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    axios\n      .get(`${PANTRY_API}/basket/${this.state.username}`)\n      .then(res => {\n        bcrypt.compare(this.state.password, res.data.password, (_, passwordMatch) => {\n          if (passwordMatch) {\n            localStorage.setItem('loggedInUser', JSON.stringify({\n              username: res.data.username\n            }));\n            this.props.handleLogin();\n          } else {\n            throw(new Error('Username and password dont match'));\n          }\n        });\n      }, err => console.log('Please signup, user cant be found'))\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          name=\"username\"\n          placeholder=\"Username\"\n          onChange={this.handleInputChange}\n          value={this.state.username} />\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          onChange={this.handleInputChange}\n          value={this.state.password} />\n        <button onClick={this.handleSubmit}>Login</button>\n      </form>\n    )\n  }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport bcrypt from 'bcryptjs';\nimport axios from 'axios';\nimport { PANTRY_API } from '../../App';\n\nclass Signup extends Component {\n  state = {\n    username: '',\n    password: '',\n    passwordRepeat: ''\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (this.state.password !== this.state.passwordRepeat) {\n      console.log('Enter same password');\n      return;\n    }\n\n    bcrypt.hash(this.state.password, 10, (_, hashedPassword) => {\n      axios\n        .post(`${PANTRY_API}/basket/${this.state.username}`, {\n          username: this.state.username,\n          password: hashedPassword\n        })\n        .then(res => console.log('RES', res));\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          name=\"username\"\n          placeholder=\"Username\"\n          onChange={this.handleInputChange}\n          value={this.state.username} />\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          onChange={this.handleInputChange}\n          value={this.state.password} />\n        <input\n          type=\"password\"\n          name=\"passwordRepeat\"\n          placeholder=\"Repeat Password\"\n          onChange={this.handleInputChange}\n          value={this.state.passwordRepeat} />\n        <button onClick={this.handleSubmit}>Signup</button>\n      </form>\n    )\n  }\n}\n\nexport default Signup;","import React, { Component } from 'react';\nimport Login from '../../components/Login';\nimport Signup from '../../components/Signup';\n\nclass LoginPage extends Component {\n  componentDidMount() {\n    this.checkUserLoggedIn();\n  }\n\n  handleLogin = () => {\n    this.checkUserLoggedIn();\n  }\n\n  checkUserLoggedIn = () => {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n    if (loggedInUser) {\n      this.props.history.push('/my-pentry');\n    }\n  }\n  \n  render() {\n    return (\n      <>\n        <Login handleLogin={this.handleLogin} />\n        - or -\n        <Signup />\n      </>\n    )\n  }\n}\n\nexport default LoginPage;","import React, { Component } from 'react';\n\nclass MyPentryPage extends Component {\n  componentDidMount() {\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\n    if (!loggedInUser) {\n      this.props.history.push('/');\n    }\n  }\n\n  render() {\n    return (\n      <div>Pentry Page</div>\n    )\n  }\n}\n\nexport default MyPentryPage;","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';\nimport MyPentryPage from './pages/MyPentryPage';\n\nexport const PANTRY_API = process.env.REACT_APP_PANTRY_API;\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={LoginPage} />\n          <Route path=\"/my-pentry\" component={MyPentryPage} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}